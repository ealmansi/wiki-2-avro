/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package wikipedia.schemas;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Contributor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contributor\",\"namespace\":\"wikipedia.schemas\",\"fields\":[{\"name\":\"ip\",\"type\":[\"null\",\"string\"]},{\"name\":\"username\",\"type\":[\"null\",\"string\"]},{\"name\":\"user_id\",\"type\":[\"null\",\"long\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.Long user_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Contributor() {}

  /**
   * All-args constructor.
   */
  public Contributor(java.lang.CharSequence ip, java.lang.CharSequence username, java.lang.Long user_id) {
    this.ip = ip;
    this.username = username;
    this.user_id = user_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ip;
    case 1: return username;
    case 2: return user_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ip = (java.lang.CharSequence)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: user_id = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   */
  public java.lang.Long getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.user_id = value;
  }

  /** Creates a new Contributor RecordBuilder */
  public static wikipedia.schemas.Contributor.Builder newBuilder() {
    return new wikipedia.schemas.Contributor.Builder();
  }
  
  /** Creates a new Contributor RecordBuilder by copying an existing Builder */
  public static wikipedia.schemas.Contributor.Builder newBuilder(wikipedia.schemas.Contributor.Builder other) {
    return new wikipedia.schemas.Contributor.Builder(other);
  }
  
  /** Creates a new Contributor RecordBuilder by copying an existing Contributor instance */
  public static wikipedia.schemas.Contributor.Builder newBuilder(wikipedia.schemas.Contributor other) {
    return new wikipedia.schemas.Contributor.Builder(other);
  }
  
  /**
   * RecordBuilder for Contributor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contributor>
    implements org.apache.avro.data.RecordBuilder<Contributor> {

    private java.lang.CharSequence ip;
    private java.lang.CharSequence username;
    private java.lang.Long user_id;

    /** Creates a new Builder */
    private Builder() {
      super(wikipedia.schemas.Contributor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(wikipedia.schemas.Contributor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Contributor instance */
    private Builder(wikipedia.schemas.Contributor other) {
            super(wikipedia.schemas.Contributor.SCHEMA$);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public wikipedia.schemas.Contributor.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ip = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ip' field */
    public wikipedia.schemas.Contributor.Builder clearIp() {
      ip = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public wikipedia.schemas.Contributor.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'username' field */
    public wikipedia.schemas.Contributor.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user_id' field */
    public java.lang.Long getUserId() {
      return user_id;
    }
    
    /** Sets the value of the 'user_id' field */
    public wikipedia.schemas.Contributor.Builder setUserId(java.lang.Long value) {
      validate(fields()[2], value);
      this.user_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user_id' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user_id' field */
    public wikipedia.schemas.Contributor.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Contributor build() {
      try {
        Contributor record = new Contributor();
        record.ip = fieldSetFlags()[0] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.user_id = fieldSetFlags()[2] ? this.user_id : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
