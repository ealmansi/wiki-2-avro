/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package de.mpg.mpi.inf.d5.wikipedia.export.schemas;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RevisionWikilink extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RevisionWikilink\",\"namespace\":\"de.mpg.mpi.inf.d5.wikipedia.export.schemas\",\"fields\":[{\"name\":\"page_id\",\"type\":[\"null\",\"long\"]},{\"name\":\"revision_id\",\"type\":[\"null\",\"long\"]},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"]},{\"name\":\"wikilink\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long page_id;
  @Deprecated public java.lang.Long revision_id;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence wikilink;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RevisionWikilink() {}

  /**
   * All-args constructor.
   */
  public RevisionWikilink(java.lang.Long page_id, java.lang.Long revision_id, java.lang.CharSequence timestamp, java.lang.CharSequence wikilink) {
    this.page_id = page_id;
    this.revision_id = revision_id;
    this.timestamp = timestamp;
    this.wikilink = wikilink;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return page_id;
    case 1: return revision_id;
    case 2: return timestamp;
    case 3: return wikilink;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: page_id = (java.lang.Long)value$; break;
    case 1: revision_id = (java.lang.Long)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    case 3: wikilink = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'page_id' field.
   */
  public java.lang.Long getPageId() {
    return page_id;
  }

  /**
   * Sets the value of the 'page_id' field.
   * @param value the value to set.
   */
  public void setPageId(java.lang.Long value) {
    this.page_id = value;
  }

  /**
   * Gets the value of the 'revision_id' field.
   */
  public java.lang.Long getRevisionId() {
    return revision_id;
  }

  /**
   * Sets the value of the 'revision_id' field.
   * @param value the value to set.
   */
  public void setRevisionId(java.lang.Long value) {
    this.revision_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'wikilink' field.
   */
  public java.lang.CharSequence getWikilink() {
    return wikilink;
  }

  /**
   * Sets the value of the 'wikilink' field.
   * @param value the value to set.
   */
  public void setWikilink(java.lang.CharSequence value) {
    this.wikilink = value;
  }

  /** Creates a new RevisionWikilink RecordBuilder */
  public static de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder newBuilder() {
    return new de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder();
  }
  
  /** Creates a new RevisionWikilink RecordBuilder by copying an existing Builder */
  public static de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder newBuilder(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder other) {
    return new de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder(other);
  }
  
  /** Creates a new RevisionWikilink RecordBuilder by copying an existing RevisionWikilink instance */
  public static de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder newBuilder(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink other) {
    return new de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder(other);
  }
  
  /**
   * RecordBuilder for RevisionWikilink instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RevisionWikilink>
    implements org.apache.avro.data.RecordBuilder<RevisionWikilink> {

    private java.lang.Long page_id;
    private java.lang.Long revision_id;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence wikilink;

    /** Creates a new Builder */
    private Builder() {
      super(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.page_id)) {
        this.page_id = data().deepCopy(fields()[0].schema(), other.page_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.revision_id)) {
        this.revision_id = data().deepCopy(fields()[1].schema(), other.revision_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wikilink)) {
        this.wikilink = data().deepCopy(fields()[3].schema(), other.wikilink);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RevisionWikilink instance */
    private Builder(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink other) {
            super(de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.SCHEMA$);
      if (isValidValue(fields()[0], other.page_id)) {
        this.page_id = data().deepCopy(fields()[0].schema(), other.page_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.revision_id)) {
        this.revision_id = data().deepCopy(fields()[1].schema(), other.revision_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wikilink)) {
        this.wikilink = data().deepCopy(fields()[3].schema(), other.wikilink);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'page_id' field */
    public java.lang.Long getPageId() {
      return page_id;
    }
    
    /** Sets the value of the 'page_id' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder setPageId(java.lang.Long value) {
      validate(fields()[0], value);
      this.page_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'page_id' field has been set */
    public boolean hasPageId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'page_id' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder clearPageId() {
      page_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'revision_id' field */
    public java.lang.Long getRevisionId() {
      return revision_id;
    }
    
    /** Sets the value of the 'revision_id' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder setRevisionId(java.lang.Long value) {
      validate(fields()[1], value);
      this.revision_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'revision_id' field has been set */
    public boolean hasRevisionId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'revision_id' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder clearRevisionId() {
      revision_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'timestamp' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'wikilink' field */
    public java.lang.CharSequence getWikilink() {
      return wikilink;
    }
    
    /** Sets the value of the 'wikilink' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder setWikilink(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.wikilink = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'wikilink' field has been set */
    public boolean hasWikilink() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'wikilink' field */
    public de.mpg.mpi.inf.d5.wikipedia.export.schemas.RevisionWikilink.Builder clearWikilink() {
      wikilink = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public RevisionWikilink build() {
      try {
        RevisionWikilink record = new RevisionWikilink();
        record.page_id = fieldSetFlags()[0] ? this.page_id : (java.lang.Long) defaultValue(fields()[0]);
        record.revision_id = fieldSetFlags()[1] ? this.revision_id : (java.lang.Long) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.wikilink = fieldSetFlags()[3] ? this.wikilink : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
